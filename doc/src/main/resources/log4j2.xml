<?xml version="1.0" encoding="UTF-8"?>
<!-- 
status : 指定log4j本身的打印日志的级别.ALL< Trace < DEBUG < INFO < WARN < ERROR < FATAL < OFF。
monitorInterval : 用于指定log4j自动重新配置的监测间隔时间，单位是s,最小是5s. 
-->
<Configuration status="WARN" monitorInterval="30">
    <Properties>
        <!-- 配置日志文件输出目录 ${sys:user.home} -->
        <Property name="LOG_HOME">logs/doc</Property>
        <property name="ERROR_LOG_FILE_NAME">logs/doc/error</property>
        <property name="WARN_LOG_FILE_NAME">logs/doc/warn</property>
        <property name="PATTERN">%d{yyyy-MM-dd HH:mm:ss.SSS} [%t-%L] %-5level %logger{36} - %msg%n</property>
    </Properties>

    <Appenders>
        <!--这个输出控制台的配置 -->
        <Console name="Console" target="SYSTEM_OUT">
            <!-- 控制台只输出level及以上级别的信息(onMatch),其他的直接拒绝(onMismatch) -->
            <ThresholdFilter level="all" onMatch="ACCEPT" onMismatch="DENY"/>
            <!-- 输出日志的格式 -->
            <!-- 
                %d{yyyy-MM-dd HH:mm:ss, SSS} : 日志生产时间 
                %p : 日志输出格式 
                %c : logger的名称 
                %m : 日志内容，即 logger.info("message") 
                %n : 换行符 
                %C : Java类名 
                %L : 日志输出所在行数 
                %M : 日志输出所在方法名 
                hostName : 本地机器名 
                hostAddress : 本地ip地址 -->
            <PatternLayout pattern="${PATTERN}"/>
        </Console>

        <!--文件会打印出所有信息，这个log每次运行程序会自动清空，由append属性决定，这个也挺有用的，适合临时测试用 -->
        <!--append为TRUE表示消息增加到指定文件中，false表示消息覆盖指定的文件内容，默认值是true -->
        <File name="File" fileName="${LOG_HOME}/logs/test.log" append="true">
            <PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n"/>
        </File>
        <!-- 这个会打印出所有的info及以下级别的信息，每次大小超过size，
        	则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档 -->
        <RollingFile name="RollingFileInfo" fileName="${LOG_HOME}/info.log"

                     filePattern="${LOG_HOME}/$${date:yyyy-MM}/info-%d{yyyy-MM-dd}-%i.log">

            <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）  onMatch="ACCEPT" 匹配接受   onMismatch="DENY" 不匹配拒绝 -->

            <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n"/>
            <Policies>
                <!-- 基于时间的滚动策略，interval属性用来指定多久滚动一次，默认是1 hour。 modulate=true
                	用来调整时间：比如现在是早上3am，interval是4，那么第一次滚动是在4am，接着是8am，12am...而不是7am. -->

                <!-- 关键点在于 filePattern后的日期格式，以及TimeBasedTriggeringPolicy的interval，
               		 日期格式精确到哪一位，interval也精确到哪一个单位 -->

                <!-- log4j2的按天分日志文件 : info-%d{yyyy-MM-dd}-%i.log-->

                <!-- 
                	TimeBasedTriggeringPolicy需要和filePattern配套使用，由于filePattern配置的时间最小粒度是dd天，
                	所以表示每一天新建一个文件保存日志。
                -->
                <TimeBasedTriggeringPolicy interval="1" modulate="true"/>
                <!--
                        SizeBasedTriggeringPolicy表示当文件大小大于指定size时，生成新的文件保存日志。
                         此处为每个文件大小策略限制，使用它一般会在文件中filePattern采用%i模式
                -->
                <!-- <SizeBasedTriggeringPolicy size="2 kB" />  -->
                <SizeBasedTriggeringPolicy size="500 MB"/>
            </Policies>
            <!-- 
             	 DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件，这里设置了20 
            	 DefaultRolloverStrategy字段中加入max=“30”经测试是配合SizeBasedTriggeringPolicy限制%i的存在数量
            -->
            <DefaultRolloverStrategy max="30"/>
        </RollingFile>

        <RollingFile name="RollingFileWarn" fileName="${WARN_LOG_FILE_NAME}/warn.log"
                     filePattern="${WARN_LOG_FILE_NAME}/$${date:yyyy-MM}/warn-%d{yyyy-MM-dd}-%i.log">
            <ThresholdFilter level="warn" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n"/>
            <Policies>
                <TimeBasedTriggeringPolicy/>
                <!--  <SizeBasedTriggeringPolicy size="2 kB" /> -->
                <SizeBasedTriggeringPolicy size="500 MB"/>
            </Policies>
            <!--
                DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件，这里设置了30
            	DefaultRolloverStrategy字段中加入max=“30”经测试是配合SizeBasedTriggeringPolicy限制%i的存在数量
            	前面的会被后面的覆盖
            -->
            <DefaultRolloverStrategy max="30"/>
        </RollingFile>

        <RollingFile name="RollingFileError" fileName="${ERROR_LOG_FILE_NAME}/error.log"
                     filePattern="${ERROR_LOG_FILE_NAME}/$${date:yyyy-MM}/error-%d{yyyy-MM-dd}-%i.log">
            <ThresholdFilter level="error" onMatch="ACCEPT"
                             onMismatch="DENY"/>
            <PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n"/>
            <Policies>
                <!-- log4j2的按分钟 分日志文件 : warn-%d{yyyy-MM-dd-HH-mm}-%i.log-->
                <TimeBasedTriggeringPolicy interval="1" modulate="true"/>
                <SizeBasedTriggeringPolicy size="500 MB"/>
            </Policies>
            <DefaultRolloverStrategy max="30"/>
        </RollingFile>

    </Appenders>

    <!--然后定义logger，只有定义了logger并引入的appender，appender才会生效-->
    <Loggers>

        <!--我们只让这个logger输出trace信息，其他的都是error级别-->
        <!--
        additivity开启的话，由于这个logger也是满足root的，所以会被打印两遍。
        不过root logger 的level是error，为什么Bar 里面的trace信息也被打印两遍呢
        -->
        <!-- 单独给com.example.demo做一个配置 -->
        <logger name="com.qin.doc" level="trace" additivity="false">
            <appender-ref ref="Console"/>
        </logger>
        <!--默认情况下子Logger会继承父Logger的appender，也就是说子Logger会在父Logger的appender里输出-->
        <!--若是additivity设为false，则子Logger只会在自己的appender里输出-->
        <logger name="com.qin.demo" level="error">
            <appender-ref ref="Console"/>
        </logger>
        <!--
            一般情况下只有父类 是error
            子类要输出的 info 比父类的小
            才需要在子类的  logger 配置 appender
            这个子类 会继承父Logger的appender
            导致输出两次 这时候才需要在子类的 logger 加上  additivity="false"
            才不会输出两次
            子类的  logger 没有配置 appender 就不用配置 additivity="false"
            直接继承父类的 appender
         -->
        <!-- 配置日志的根节点 -->
        <!--         <root level="all"> -->
        <!--             <appender-ref ref="Console"/> -->
        <!--             <appender-ref ref="RollingFileInfo"/> -->
        <!--             <appender-ref ref="RollingFileWarn"/> -->
        <!--             <appender-ref ref="RollingFileError"/> -->
        <!--         </root> -->

        <!--建立一个默认的root的logger-->
        <!-- 没有在配置文件的loggers下面做配置，他们也都能够输出，因为他们都继承了root的log配置 -->
        <asyncRoot level="info">
            <appender-ref ref="Console"/>
            <!--            <appender-ref ref="File"/> -->
            <!--            <appender-ref ref="RollingFileInfo"/>-->
            <!--            <appender-ref ref="RollingFileWarn"/>-->
            <!--            <appender-ref ref="RollingFileError"/>-->
        </asyncRoot>

    </Loggers>


</Configuration>