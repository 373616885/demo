<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.4.5</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>

    <groupId>com.qin</groupId>
    <artifactId>docker</artifactId>
    <version>0.0.4</version>

    <name>docker</name>
    <description>Demo project for Spring Boot</description>

    <properties>
        <java.version>11</java.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-webflux</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-configuration-processor</artifactId>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.projectreactor</groupId>
            <artifactId>reactor-test</artifactId>
            <scope>test</scope>
        </dependency>
        <!-- https://mvnrepository.com/artifact/io.fabric8/docker-maven-plugin -->
        <dependency>
            <groupId>io.fabric8</groupId>
            <artifactId>docker-maven-plugin</artifactId>
            <version>0.36.0</version>
        </dependency>

    </dependencies>

    <profiles>
        <!-- 开发环境，默认激活 -->
        <profile>
            <id>dev</id>
            <properties>
                <profileActive>dev</profileActive>
                <dockerfile.skip>false</dockerfile.skip>
                <jib.skip>false</jib.skip>
				<fabric8.skip>false</fabric8.skip>
            </properties>
            <!--默认启用的环境配置 -->
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
        </profile>
        <!-- 测试环境 -->
        <profile>
            <id>uat</id>
            <properties>
                <profileActive>uat</profileActive>
                <dockerfile.skip>false</dockerfile.skip>
                <jib.skip>false</jib.skip>
				<fabric8.skip>false</fabric8.skip>
            </properties>
        </profile>
    </profiles>

    <build>
        <finalName>docker</finalName>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <excludes>
                        <exclude>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                        </exclude>
                    </excludes>
                </configuration>
            </plugin>
            <plugin>
                <groupId>io.fabric8</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>0.36.0</version>
                <executions>
                    <!--如果想在项目打包时构建镜像添加-->
                    <execution>
                        <id>build-image</id>
                        <phase>package</phase>
                        <goals>
                            <goal>build</goal>
                        </goals>
                    </execution>
                </executions>
                <!--全局配置-->
                <configuration>
                    <skip>${fabric8.skip}</skip>
                    <!--这一部分是为了实现对远程docker容器的控制-->
                    <!--docker主机地址,用于完成docker各项功能,注意是tcp不是http!-->
                    <dockerHost>tcp://localhost:2375</dockerHost>
                    <!--docker远程访问所需证书地址,如果docker远程主机没有启用TLS验证则不需要配证书-->
                    <!--<certPath>${project.basedir}/docker/ssh</certPath>-->

                    <!--这一部分是为了实现docker镜像的构建和推送-->
                    <!--registry地址,用于推送,拉取镜像 默认就是 docker.io-->
                    <!--<registry>docker.io</registry>-->
                    <!--认证配置,用于私有registry认证,如果忘记了可以去阿里的registry查看-->

                    <authConfig>
                        <push>
                            <username>123456789</username>
                            <password>123456789</password>
                        </push>
                    </authConfig>

                    <!--镜像相关配置,支持多镜像-->
                    <images>
                        <!-- 单个镜像配置 -->
                        <image>
                            <!--镜像名(含版本号)-->
                            <!--dockerHub规范：用户名/镜像名字:镜像版本 -->
                            <name>373616885/qin-docker:${project.version}</name>
                            <!--镜像build相关配置-->
                            <build>
                                <args>
                                    <JAR_FILE>${project.build.finalName}.jar</JAR_FILE>
                                </args>
                                <!--使用dockerFile文件-->
                                <dockerFile>${project.basedir}/Dockerfile</dockerFile>
                            </build>
                            <!--容器run相关配置-->
                            <!--别名:用于容器命名和在docker-compose.yml文件只能找到对应名字的配置-->
                            <alias>qin-${project.name}-${project.version}</alias>
                            <run>
                                <!--配置运行时容器命名策略为:别名,如果不指定则默认为none,即使用随机分配名称-->
                                <namingStrategy>alias</namingStrategy>
                                <ports>
                                    <port>8080:8080</port>
                                </ports>
                            </run>
                        </image>
                    </images>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>
